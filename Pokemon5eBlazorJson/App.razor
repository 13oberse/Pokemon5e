@inject HttpClient Client

@if (IsComplete())
{
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <CascadingValue Value="Abilities!" Name="@nameof(Abilities)">
                <CascadingValue Value="EvolveData!" Name="@nameof(EvolveData)">
                    <CascadingValue Value="ExpGrid!" Name="@nameof(ExpGrid)">
                        <CascadingValue Value="Feats!" Name="@nameof(Feats)">
                            <CascadingValue Value="Habitats!" Name="@nameof(Habitats)">
                                <CascadingValue Value="Items!" Name="@nameof(Items)">
                                    <CascadingValue Value="LevelingData!" Name="@nameof(LevelingData)">
                                        <CascadingValue Value="MoveMachines!" Name="@nameof(MoveMachines)">
                                            <CascadingValue Value="Moves!" Name="@nameof(Moves)">
                                                <CascadingValue Value="Natures!" Name="@nameof(Natures)">
                                                    <CascadingValue Value="Pokemon!" Name="@nameof(Pokemon)">
                                                        <CascadingValue Value="TrainerClasses!" Name="@nameof(TrainerClasses)">
                                                            <CascadingValue Value="Variants!" Name="@nameof(Variants)">
                                                                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)"/>
                                                                <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
                                                            </CascadingValue>
                                                        </CascadingValue>
                                                    </CascadingValue>
                                                </CascadingValue>
                                            </CascadingValue>
                                        </CascadingValue>
                                    </CascadingValue>
                                </CascadingValue>
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
            </CascadingValue>
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
}
else
{
    <div class="container">
        <table class="table table-bordered table-striped">
            <tbody>
            <LoadingTableRow Name="Abilities" Data="Abilities"></LoadingTableRow>
            <LoadingTableRow Name="Evolve Data" Data="EvolveData"></LoadingTableRow>
            <LoadingTableRow Name="Exp Grid" Data="ExpGrid"></LoadingTableRow>
            <LoadingTableRow Name="Feats" Data="Feats"></LoadingTableRow>
            <LoadingTableRow Name="Habitats" Data="Habitats"></LoadingTableRow>
            <LoadingTableRow Name="Items" Data="Items"></LoadingTableRow>
            <LoadingTableRow Name="Leveling Data" Data="LevelingData"></LoadingTableRow>
            <LoadingTableRow Name="TMs" Data="MoveMachines"></LoadingTableRow>
            <LoadingTableRow Name="Moves" Data="Moves"></LoadingTableRow>
            <LoadingTableRow Name="Natures" Data="Natures"></LoadingTableRow>
            <LoadingTableRow Name="Pokemon" Data="Pokemon"></LoadingTableRow>
            <LoadingTableRow Name="Trainer Classes" Data="TrainerClasses"></LoadingTableRow>
            <LoadingTableRow Name="Variants" Data="Variants"></LoadingTableRow>
            </tbody>
        </table>
    </div>
}

@code
{
    public List<AbilityData>? Abilities;
    public List<EvolveData>? EvolveData;
    public List<ExpGridData>? ExpGrid;
    public List<FeatData>? Feats;
    public List<HabitatData>? Habitats;
    public List<ItemData>? Items;
    public List<LevelingData>? LevelingData;
    public List<TMData>? MoveMachines;
    public List<MoveData>? Moves;
    public List<NatureData>? Natures;
    public List<PokemonData>? Pokemon;
    public List<TrainerClassData>? TrainerClasses;
    public List<VariantData>? Variants;

    private bool IsComplete() => Abilities != null && EvolveData != null && ExpGrid != null && Feats != null
                                 && Habitats != null && Items != null && LevelingData != null && MoveMachines != null && Moves != null
                                 && Natures != null && Pokemon != null && TrainerClasses != null && Variants != null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Abilities = await Client.GetFromJsonAsync<List<AbilityData>>("DataFiles/abilities.json");
        EvolveData = await Client.GetFromJsonAsync<List<EvolveData>>("DataFiles/evolve.json");
        ExpGrid = await Client.GetFromJsonAsync<List<ExpGridData>>("DataFiles/exp_grid.json");
        Feats = await Client.GetFromJsonAsync<List<FeatData>>("DataFiles/feats.json");
        Habitats = await Client.GetFromJsonAsync<List<HabitatData>>("DataFiles/habitat.json");
        Items = await Client.GetFromJsonAsync<List<ItemData>>("DataFiles/items.json");
        LevelingData = await Client.GetFromJsonAsync<List<LevelingData>>("DataFiles/leveling.json");
        MoveMachines = await Client.GetFromJsonAsync<List<TMData>>("DataFiles/move_machines.json");
        Moves = await Client.GetFromJsonAsync<List<MoveData>>("DataFiles/moves.json");
        Natures = await Client.GetFromJsonAsync<List<NatureData>>("DataFiles/natures.json");
        Pokemon = await Client.GetFromJsonAsync<List<PokemonData>>("DataFiles/pokemon.json");
        TrainerClasses = await Client.GetFromJsonAsync<List<TrainerClassData>>("DataFiles/trainer_classes.json");
        Variants = await Client.GetFromJsonAsync<List<VariantData>>("DataFiles/variant_map.json");
    }
}