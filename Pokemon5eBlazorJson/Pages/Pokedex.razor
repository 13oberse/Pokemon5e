@page "/Pokedex"
<h3>Pokedex</h3>

<div class="row">
    <div class="col-md-2">
        <div class="card">
            <div class="card-header">Parameters</div>
            <div class="card-body">
                <fieldset class="form-group">
                    <legend class="col-form-label">Name</legend>
                    <input class="form-control" type="text" @bind="_name"/>
                </fieldset>
                <fieldset class="form-group">
                    <legend class="col-form-label">Type</legend>
                    <select class="form-control" @bind="_type">
                        <option value="">- Select -</option>
                        @foreach (var item in DefaultValues.ListPokemonTypeAll)
                        {
                            <option value="@item">@item</option>
                        }
                    </select>
                </fieldset>
                <fieldset class="form-group">
                    <legend class="col-form-label">Final Form</legend>
                    <select class="form-control" @onchange="e => OnFinalFormChange(e.Value)">
                        <option value="">- Select -</option>
                        <option value="@bool.FalseString">false</option>
                        <option value="@bool.TrueString">true</option>
                    </select>
                </fieldset>
                <fieldset class="form-group">
                    <legend class="col-form-label">Learns Move</legend>
                    <select class="form-control" @bind="_learnsMove">
                        <option value="">- Select -</option>
                        @foreach (var item in Moves)
                        {
                            <option value="@item.Name">@item.Name</option>
                        }
                    </select>
                </fieldset>
            </div>
        </div>
    </div>

    <div class="col-md-10">
        <table class="table table-bordered table-striped table-responsive">
            <caption>Results</caption>
            <thead>
            <tr>
                <th>Name</th>
                <th>SR</th>
                <th>Min Field Lvl</th>
                <th>HP (Hit Dice)</th>
                <th>Armor Class</th>
                <th>Size</th>
                <th>Type(s)</th>
                <th>Attributes</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in GetList())
            {
                <tr style="cursor: pointer;" @onclick="() => item.ShowHide = !item.ShowHide">
                    <td>@item.Name</td>
                    <td>@item.SpeciesRating</td>
                    <td>@item.MinimumFieldLevel</td>
                    <td>@item.HP (@item.HitDice)</td>
                    <td>@item.ArmorClass</td>
                    <td>@item.Size</td>
                    <td>@item.Type1 / @item.Type2</td>
                    <td>@string.Join(", ", item.Attributes.Select(x => $"{x.Key}:{x.Value}"))</td>
                </tr>
                <tr style="display: @(item.ShowHide ? "" : "none");">
                    <td colspan="100">
                        <table class="table table-bordered table-striped table-sm mb-0">
                            <thead>
                            <tr>
                                <th>Abilities</th>
                                <th>Hidden Ability</th>
                                <th>Senses</th>
                                <th>Skills</th>
                                <th>Saving Throws</th>
                            </tr>
                            </thead>
                            <tbody>
                            <tr>
                                <td>@string.Join(",", item.Abilities)</td>
                                <td>@item.HiddenAbility</td>
                                <td>
                                    @if (item.Senses != null)
                                    {
                                        <span>@string.Join(", ", item.Senses)</span>
                                    }
                                </td>
                                <td>
                                    @if (item.Skills != null)
                                    {
                                        <span>@string.Join(", ", item.Skills)</span>
                                    }
                                </td>
                                <td>
                                    @if (item.SavingThrows != null)
                                    {
                                        <span>@string.Join(", ", item.SavingThrows)</span>
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td colspan="1">
                                    <table class="table table-bordered table-striped table-sm mb-0">
                                        <thead>
                                        <tr>
                                            <th>Type</th>
                                            <th>Speed</th>
                                        </tr>
                                        </thead>
                                        <tbody>
                                        <tr>
                                            <td>Walking</td>
                                            <td>@item.WalkSpeed</td>
                                        </tr>
                                        <tr>
                                            <td>Swiming</td>
                                            <td>@item.SwimSpeed</td>
                                        </tr>
                                        <tr>
                                            <td>Climbing</td>
                                            <td>@item.ClimbSpeed</td>
                                        </tr>
                                        <tr>
                                            <td>Flying</td>
                                            <td>@item.FlySpeed</td>
                                        </tr>
                                        </tbody>
                                    </table>
                                </td>
                                <td colspan="100">
                                    <table class="table table-bordered table-striped table-sm mb-0">
                                        <thead>
                                        <tr>
                                            <th>Source</th>
                                            <th>Move</th>
                                        </tr>
                                        </thead>
                                        <tbody>
                                        <tr>
                                            <td>Start</td>
                                            <td>@string.Join(", ", item.Moves.StartingMoves)</td>
                                        </tr>
                                        @if (item.Moves.LearnByLevelUp != null)
                                        {
                                            foreach (var levelData in item.Moves.LearnByLevelUp)
                                            {
                                                <tr>
                                                    <td>Level @levelData.Key</td>
                                                    <td>@string.Join(", ", levelData.Value)</td>
                                                </tr>
                                            }
                                        }
                                        @if (item.Moves.LearnByTM != null)
                                        {
                                            <tr>
                                                <td>TM</td>
                                                <td>@string.Join(", ", item.Moves.LearnByTM.Select(x => $"{x}:{MoveMachines.Find(t => t.Number == x)!.Name}"))</td>
                                            </tr>
                                        }
                                        </tbody>
                                    </table>
                                </td>
                            </tr>
                            </tbody>
                        </table>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

@code
{
    [CascadingParameter(Name = "Pokemon")]
    public List<PokemonData> PokemonList { get; set; } = null!;

    [CascadingParameter(Name = "MoveMachines")]
    public List<TMData> MoveMachines { get; set; } = null!;

    [CascadingParameter(Name = "Moves")]
    public List<MoveData> Moves { get; set; } = null!;

    private string? _name;
    private PokemonType? _type;
    private bool? _finalForm;
    private string? _learnsMove;

    private List<PokemonData> GetList()
    {
        var query = PokemonList.AsEnumerable();
        if (!string.IsNullOrWhiteSpace(_name))
        {
            query = query.Where(x => x.Name.Contains(_name, StringComparison.CurrentCultureIgnoreCase));
        }

        if (_type.HasValue)
        {
            query = query.Where(x => x.Type1 == _type.Value || (x.Type2.HasValue && x.Type2.Value == _type.Value));
        }

        if (_finalForm.HasValue)
        {
            query = query.Where(x => string.IsNullOrWhiteSpace(x.Evolve) == _finalForm.Value);
        }

        if (!string.IsNullOrWhiteSpace(_learnsMove))
        {
            var tm = MoveMachines.Where(x => string.Equals(x.Name, _learnsMove)).Select(x => x.Number).FirstOrDefault();
            query = query.Where(x => x.Moves.StartingMoves.Contains(_learnsMove)
                                     || x.Moves.LearnByLevelUp?.SelectMany(l => l.Value).Contains(_learnsMove) == true
                                     || x.Moves.LearnByTM?.Contains(tm) == true);
        }

        return query.Take(50).ToList();
    }

    private void OnFinalFormChange(object? args)
    {
        var valAsString = args?.ToString();
        if (string.IsNullOrWhiteSpace(valAsString) || !bool.TryParse(valAsString, out var valAsBool))
        {
            _finalForm = null;
        }
        else
        {
            _finalForm = valAsBool;
        }
    }
}